import os
import glob
import requests

# Parse path/url into needed parts
def parse_mbam_filename(path):
	ret = {}
	ret['path'] = path
	ret['name'] = path[path.rindex('/')+1:] # Isolate the File Name
	ret['base'] = ret['name'][:ret['name'].rindex('-')] # Isolate the File Base
	ret['version'] = ret['name'][ ret['name'].rindex('-')+1:ret['name'].rindex('.') ] # Isolate the File Version
	return ret

# Compare mbam versions
def is_newer_mbam(a,b):
	a = a.split('.') #split version into list of tuples
	b = b.split('.')
	for i,t in enumerate(a): # Compare each Tuple of Version
		if int(t) > int(b[i]):
			return True # A Larger than B
	return False # A Equal to or Lesser than B

# Path to search for downloaded versions and to save new version
path_to_file = '/path/to/downloads/directory/' # Must have ending '/'

# URL returns a redirect in the `Location` header to the latest file
req = requests.get('https://downloads.malwarebytes.com/file/mbam_current/', allow_redirects=False)
latest = parse_mbam_filename(req.headers['Location'])
download = True # Assume we will be downloading the new version
print "Latest Version: "+latest['version']

# Loop over all mbam_setup files in path_to_file
# Delete any older versions
# If newer or equal version found, don't override download of new version'
for f in glob.iglob(path_to_file+latest['base']+"*.exe"):
	temp = parse_mbam_filename(f)
	if is_newer_mbam(latest['version'],temp['version']):
		print "Found old version: " + temp['version'] + ". Deleting..."
		os.remove(temp['path'])
	else:
		print "Found current or newer version: " + temp['version'] + ". Skipping Download..."
		download = False

# Download new version
if download:
	file_path = path_to_file+latest['name']
	print "Downloading latest version: " + latest['version']
	req = requests.get(latest['path'], stream=True)
	with open(file_path, 'wb') as f:
		for chunk in req.iter_content(chunk_size=1024): 
			if chunk: # filter out keep-alive new chunks
				f.write(chunk)
	f.close()
	if os.path.getsize(file_path) == int(req.headers['Content-Length']):
		print "File Size Verified"
	else:
		os.remove(file_path)
		print "File Corrupted in Download"